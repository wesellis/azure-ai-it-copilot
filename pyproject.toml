[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "azure-ai-it-copilot"
version = "1.0.0"
description = "Enterprise-grade Azure AI IT Copilot with natural language interface"
authors = [
    {name = "Azure AI Team", email = "ai-team@company.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["azure", "ai", "copilot", "devops", "automation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    "fastapi>=0.116.0,<1.0.0",
    "uvicorn[standard]>=0.35.0,<1.0.0",
    "azure-identity>=1.25.0,<2.0.0",
    "azure-mgmt-resource>=24.0.0,<25.0.0",
    "openai>=1.0.0,<2.0.0",
    "langchain>=0.3.0,<0.4.0",
    "redis>=5.0.0,<6.0.0",
    "sqlalchemy>=2.0.0,<3.0.0",
    "pydantic>=2.11.0,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "black>=24.8.0",
    "ruff>=0.8.8",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
]

monitoring = [
    "prometheus-client>=0.19.0",
    "sentry-sdk>=1.39.0",
    "structlog>=24.1.0",
]

testing = [
    "pytest-benchmark>=4.0.0",
    "locust>=2.32.4",
    "factory-boy>=3.3.1",
    "faker>=37.8.0",
]

[project.urls]
Homepage = "https://github.com/company/azure-ai-it-copilot"
Documentation = "https://docs.company.com/azure-ai-it-copilot"
Repository = "https://github.com/company/azure-ai-it-copilot"
Issues = "https://github.com/company/azure-ai-it-copilot/issues"
Changelog = "https://github.com/company/azure-ai-it-copilot/blob/main/CHANGELOG.md"

[project.scripts]
copilot-server = "api.server:main"
copilot-cli = "cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["api*", "core*", "automation_engine*", "config*", "ai_orchestrator*"]
exclude = ["tests*", "docs*", "scripts*"]

# Black code formatter
[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff linter and formatter
[tool.ruff]
target-version = "py311"
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM118", # key-in-dict
    "ICN001", # import-conventions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "S101"]

[tool.ruff.isort]
known-first-party = ["api", "core", "automation_engine", "config", "ai_orchestrator"]

# MyPy static type checker
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "azure.*",
    "langchain.*",
    "openai.*",
    "redis.*",
    "uvicorn.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "azure: marks tests that require Azure credentials",
    "openai: marks tests that require OpenAI API access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["api", "core", "automation_engine", "config", "ai_orchestrator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linter
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101"]  # Skip assert_used test

# Pre-commit hooks
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$major.$minor.$patch"
version_files = [
    "pyproject.toml:version",
]
bump_message = "bump: version $current_version â†’ $new_version"